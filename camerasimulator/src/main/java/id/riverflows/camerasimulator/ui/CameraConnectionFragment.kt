package id.riverflows.camerasimulator.ui


import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.content.Context
import android.content.pm.PackageManager
import android.content.res.Configuration
import android.graphics.ImageFormat
import android.graphics.Matrix
import android.graphics.RectF
import android.graphics.SurfaceTexture
import android.hardware.camera2.*
import android.media.ImageReader
import android.os.Bundle
import android.os.Handler
import android.os.HandlerThread
import android.text.TextUtils
import android.util.Size
import android.util.SparseIntArray
import android.view.*
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import id.riverflows.camerasimulator.R
import id.riverflows.camerasimulator.customview.AutoFitTextureView
import id.riverflows.camerasimulator.env.Logger
import java.util.*
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit
import kotlin.math.max
import kotlin.math.min

class CameraConnectionFragment(
    private val cameraConnectionCallback: ConnectionCallback,
    private val imageListener: ImageReader.OnImageAvailableListener,
    private val layout: Int,
    private val inputSize: Size
): Fragment() {
    /** A [Semaphore] to prevent the app from exiting before closing the camera.  */
    private val cameraOpenCloseLock = Semaphore(1)

    /** ID of the current [CameraDevice].  */
    private var cameraId: String = ""

    /** An [AutoFitTextureView] for camera preview.  */
    private lateinit var textureView: AutoFitTextureView

    /** A [CameraCaptureSession] for camera preview.  */
    private var captureSession: CameraCaptureSession? = null

    /** A reference to the opened [CameraDevice].  */
    private var cameraDevice: CameraDevice? = null

    /** The rotation in degrees of the camera sensor from the display.  */
    private var sensorOrientation: Int = 0

    /** The [Size] of camera preview.  */
    private lateinit var previewSize: Size

    /** An additional thread for running tasks that shouldn't block the UI.  */
    private var backgroundThread: HandlerThread? = null

    /** A [Handler] for running tasks in the background.  */
    private var backgroundHandler: Handler? = null

    /** An [ImageReader] that handles preview frame capture.  */
    private var previewReader: ImageReader? = null

    /** [CaptureRequest.Builder] for the camera preview  */
    private lateinit var previewRequestBuilder: CaptureRequest.Builder

    /** [CaptureRequest] generated by [.previewRequestBuilder]  */
    private lateinit var previewRequest: CaptureRequest

    fun setCamera(cameraId: String?){
        if(cameraId != null){
            this.cameraId = cameraId
        }
    }

    private val captureCallback = object: CameraCaptureSession.CaptureCallback() {
        override fun onCaptureProgressed(
            session: CameraCaptureSession,
            request: CaptureRequest,
            partialResult: CaptureResult
        ) {}

        override fun onCaptureCompleted(
            session: CameraCaptureSession,
            request: CaptureRequest,
            result: TotalCaptureResult
        ) {}
    }

    private val stateCallback = object: CameraDevice.StateCallback(){
        override fun onOpened(camera: CameraDevice) {
            cameraOpenCloseLock.release()
            cameraDevice = camera
            createCameraPreviewSession()
        }

        override fun onDisconnected(camera: CameraDevice) {
            cameraOpenCloseLock.release()
            camera.close()
            cameraDevice = null
        }

        override fun onError(camera: CameraDevice, error: Int) {
            cameraOpenCloseLock.release()
            camera.close()
            cameraDevice = null
            val activity: Activity? = activity
            activity?.finish()
        }
    }

    private fun createCameraPreviewSession(){
        try {
            val texture = textureView.surfaceTexture

            // We configure the size of default buffer to be the size of camera preview we want.
            texture?.setDefaultBufferSize(previewSize.width, previewSize.height)

            // This is the output Surface we need to start preview.
            val surface = Surface(texture)

            // We set up a CaptureRequest.Builder with the output Surface.
            cameraDevice?.let {
                previewRequestBuilder =
                    it.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
                previewRequestBuilder.addTarget(surface)
            }
            LOGGER.i("Opening camera preview: ${previewSize.width} x ${previewSize.height}")

            // Create the reader for the preview frames.
            previewReader = ImageReader.newInstance(
                previewSize.width, previewSize.height, ImageFormat.YUV_420_888, 2
            )
            previewReader?.setOnImageAvailableListener(imageListener, backgroundHandler)
            previewRequestBuilder.addTarget(previewReader?.surface as Surface)

            // Here, we create a CameraCaptureSession for camera preview.
            cameraDevice?.createCaptureSession(
                mutableListOf(surface, previewReader?.surface),
                object : CameraCaptureSession.StateCallback() {
                    override fun onConfigured(cameraCaptureSession: CameraCaptureSession) {
                        // The camera is already closed

                        // When the session is ready, we start displaying the preview.
                        captureSession = cameraCaptureSession
                        try {
                            // Auto focus should be continuous for camera preview.
                            previewRequestBuilder.set(
                                CaptureRequest.CONTROL_AF_MODE,
                                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
                            )
                            // Flash is automatically enabled when necessary.
                            previewRequestBuilder.set(
                                CaptureRequest.CONTROL_AE_MODE,
                                CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
                            )

                            // Finally, we start displaying the camera preview.
                            previewRequest = previewRequestBuilder.build()
                            captureSession?.setRepeatingRequest(
                                previewRequest, captureCallback, backgroundHandler
                            )
                        } catch (e: CameraAccessException) {
                            LOGGER.e(e, "Exception!")
                        }
                    }

                    override fun onConfigureFailed(cameraCaptureSession: CameraCaptureSession) {
                        showToast("Failed")
                    }
                },
                null
            )
        } catch (e: CameraAccessException) {
            LOGGER.e(e, "Exception!")
        }
    }

    private fun showToast(text: String){
        val activity: Activity? = activity
        activity?.runOnUiThread { Toast.makeText(activity, text, Toast.LENGTH_SHORT).show() }
    }

    private val surfaceTextureListener = object : TextureView.SurfaceTextureListener{
        override fun onSurfaceTextureAvailable(surface: SurfaceTexture, width: Int, height: Int) {
            openCamera(width, height)
        }

        override fun onSurfaceTextureSizeChanged(surface: SurfaceTexture, width: Int, height: Int) {
            configureTransform(width, height)
        }

        override fun onSurfaceTextureDestroyed(surface: SurfaceTexture): Boolean {
            return true
        }

        override fun onSurfaceTextureUpdated(surface: SurfaceTexture) {}
    }

    private fun openCamera(width: Int, height: Int){
        setUpCameraOutputs()
        configureTransform(width, height)
        val activity: Activity? = activity
        val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager
        try {
            if (!cameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw RuntimeException("Time out waiting to lock camera opening.")
            }
            if (ActivityCompat.checkSelfPermission(
                    requireContext(),
                    Manifest.permission.CAMERA
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                return
            }
            manager.openCamera(cameraId, stateCallback, backgroundHandler)
        } catch (e: CameraAccessException) {
            LOGGER.e(e, "Exception!")
        } catch (e: InterruptedException) {
            throw RuntimeException("Interrupted while trying to lock camera opening.", e)
        }
    }

    private fun closeCamera(){
        try {
            cameraOpenCloseLock.acquire()
            captureSession?.close()
            captureSession = null
            if (null != cameraDevice) {
                cameraDevice!!.close()
                cameraDevice = null
            }
            previewReader?.close()
            previewReader = null
        } catch (e: InterruptedException) {
            throw java.lang.RuntimeException("Interrupted while trying to lock camera closing.", e)
        } finally {
            cameraOpenCloseLock.release()
        }
    }

    private fun setUpCameraOutputs(){
        val activity: Activity? = activity
        val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager
        try {
            val characteristics = manager.getCameraCharacteristics(cameraId)
            val map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
            sensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION) ?: 0

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            previewSize = chooseOptimalSize(
                map?.getOutputSizes(SurfaceTexture::class.java) as Array<Size>,
                inputSize.width,
                inputSize.height
            )

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            val orientation = resources.configuration.orientation
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                textureView.setAspectRatio(previewSize.width, previewSize.height)
            } else {
                textureView.setAspectRatio(previewSize.height, previewSize.width)
            }
        } catch (e: CameraAccessException) {
            LOGGER.e(e, "Exception!")
        } catch (e: NullPointerException) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            ErrorDialog.newInstance(getString(R.string.tfe_od_camera_error))
                .show(childFragmentManager, FRAGMENT_DIALOG)
            throw IllegalStateException(getString(R.string.tfe_od_camera_error))
        }

        cameraConnectionCallback.onPreviewSizeChosen(previewSize, sensorOrientation)
    }

    private fun configureTransform(viewWidth: Int, viewHeight: Int){
        val activity: FragmentActivity = activity ?: return
        val rotation = activity.windowManager.defaultDisplay.rotation
        val matrix = Matrix()
        val viewRect = RectF(0f, 0f, viewWidth.toFloat(), viewHeight.toFloat())
        val bufferRect = RectF(
            0f, 0f, previewSize.height.toFloat(),
            previewSize.width.toFloat()
        )
        val centerX = viewRect.centerX()
        val centerY = viewRect.centerY()
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY())
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL)
            val scale = Math.max(
                viewHeight.toFloat() / previewSize.height,
                viewWidth.toFloat() / previewSize.width
            )
            matrix.postScale(scale, scale, centerX, centerY)
            matrix.postRotate((90 * (rotation - 2)).toFloat(), centerX, centerY)
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180f, centerX, centerY)
        }
        textureView.setTransform(matrix)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(layout, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        textureView = view.findViewById<View>(R.id.texture) as AutoFitTextureView
    }

    override fun onResume() {
        super.onResume()
        startBackgroundThread()
        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).

        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).
        if (textureView.isAvailable) {
            openCamera(textureView.width, textureView.height)
        } else {
            textureView.surfaceTextureListener = surfaceTextureListener
        }
    }

    override fun onPause() {
        closeCamera()
        stopBackgroundThread()
        super.onPause()
    }

    private fun startBackgroundThread(){
        backgroundThread = HandlerThread("ImageListener")
        backgroundThread?.start()
        backgroundHandler = Handler((backgroundThread as HandlerThread).looper)
    }

    private fun stopBackgroundThread(){
        backgroundThread?.quitSafely()
        try {
            backgroundThread?.join()
            backgroundThread = null
            backgroundHandler = null
        } catch (e: InterruptedException) {
            LOGGER.e(e, "Exception!")
        }
    }

    companion object{
        private val LOGGER = Logger()
        private const val MINIMUM_PREVIEW_SIZE = 320
        private val ORIENTATIONS = SparseIntArray()
        private const val FRAGMENT_DIALOG = "dialog"

        init {
            ORIENTATIONS.append(Surface.ROTATION_0, 90)
            ORIENTATIONS.append(Surface.ROTATION_90, 0)
            ORIENTATIONS.append(Surface.ROTATION_180, 270)
            ORIENTATIONS.append(Surface.ROTATION_270, 180)
        }

        fun chooseOptimalSize(choices: Array<Size>, width: Int, height: Int): Size {
            val minSize = max(min(width, height), MINIMUM_PREVIEW_SIZE)
            val desiredSize = Size(width, height)
            var exactSizeFound = false
            val bigEnough: MutableList<Size> = ArrayList()
            val tooSmall: MutableList<Size> = ArrayList()
            for (option in choices) {
                if (option == desiredSize) {
                    // Set the size but don't return yet so that remaining sizes will still be logged.
                    exactSizeFound = true
                }
                if(option?.height != null){
                    if (option.height >= minSize && option.width >= minSize) {
                        bigEnough.add(option)
                    } else {
                        tooSmall.add(option)
                    }
                }
            }

            LOGGER.i("Desired size: " + desiredSize + ", min size: " + minSize + "x" + minSize)
            LOGGER.i("Valid preview sizes: [" + TextUtils.join(", ", bigEnough) + "]")
            LOGGER.i("Rejected preview sizes: [" + TextUtils.join(", ", tooSmall) + "]")

            if (exactSizeFound) {
                LOGGER.i("Exact size match found.")
                return desiredSize
            }

            // Pick the smallest of those, assuming we found any

            // Pick the smallest of those, assuming we found any
            return if (bigEnough.size > 0) {
                val chosenSize = Collections.min(
                    bigEnough,
                    CompareSizesByArea()
                )
                LOGGER.i("Chosen size: ${chosenSize.width} x ${chosenSize.height}")
                chosenSize
            } else {
                LOGGER.e("Couldn't find any suitable preview size")
                choices[0]
            }
        }

        fun newInstance(
            callback: ConnectionCallback,
            imageListener: ImageReader.OnImageAvailableListener,
            layout: Int,
            inputSize: Size
        ): CameraConnectionFragment{
            return CameraConnectionFragment(callback, imageListener, layout, inputSize)
        }

        class CompareSizesByArea: Comparator<Size>{
            override fun compare(o1: Size, o2: Size): Int {

                // We cast here to ensure the multiplications won't overflow
                return java.lang.Long.signum(
                    o1.width.toLong() * o1.height - o2.width.toLong() * o2.height
                )
            }
        }

        class ErrorDialog: DialogFragment(){
            override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
                val activity: Activity? = activity
                return AlertDialog.Builder(activity)
                    .setMessage(arguments?.getString(ARG_MESSAGE))
                    .setPositiveButton(
                        R.string.ok
                    ) { _, _ -> activity?.finish() }
                    .create()
            }

            companion object{
                private const val ARG_MESSAGE = "message"

                fun newInstance(message: String): ErrorDialog{
                    val dialog = ErrorDialog()
                    val args = Bundle()
                    args.putString(ARG_MESSAGE, message)
                    dialog.arguments = args
                    return dialog
                }
            }
        }

        interface ConnectionCallback{
            fun onPreviewSizeChosen(size: Size, cameraRotation: Int)
        }
    }
}